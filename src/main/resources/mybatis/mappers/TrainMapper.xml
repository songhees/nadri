<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.nadri.train.mapper.TrainMapper">

	<!-- 한글 유니코드로 기차역 조회하기 -->
	<select id="getStationByWord" parameterType="string" resultType="com.nadri.train.vo.TrainStation">
		select station_id as id,
			 station_name as name,
			 city_code as cityCode,
			 check_used as isUsed  
		from train_station
		<where>
			<choose>
				<when test="word == 45207">
					station_name > nchr(0) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 45795">
					station_name > nchr(45207) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 46971">
					station_name > nchr(45795) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 47559">
					station_name > nchr(46971) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 48147">
					station_name > nchr(47559) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 49323">
					station_name > nchr(48147) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 50499">
					station_name > nchr(49323) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 51087">
					station_name > nchr(50499) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 52263">
					station_name > nchr(51087) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 52851">
					station_name > nchr(52263) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 53439">
					station_name > nchr(52851) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 54027">
					station_name > nchr(53439) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 54615">
					station_name > nchr(54027) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 55203">
					station_name > nchr(54615) and station_name &lt;= nchr(#{value})
				</when>
			</choose>
		</where>
	</select>
	
	<select id="getAllTrainSchedules" resultType="com.nadri.train.vo.TrainSchedule">
		select 	schedule_no as no,
				schedule_departure_time as departureTime,
			 schedule_arrival_time as arrivalTime,
			 train_no as trainNo,
			 route_no as routeNo
		from train_schedule
		where schedule_no >= 1010 and schedule_no &lt; 1912
	</select>
	
	<insert id="insertNewSchedule" parameterType="java.util.List">
		insert into train_schedule(schedule_no, schedule_departure_time, schedule_arrival_time, train_no, route_no)
		select train_schedules_seq.nextval, A.* from (
		<foreach collection="list" item="data" separator="UNION ALL ">
			select #{data.departureTime}, #{data.arrivalTime}, 
				#{data.trainNo}, #{data.routeNo}
			from dual
		</foreach> ) A
	</insert>
	
	<!-- 검색 정보로 기차 스케줄 조회 sql -->
	<select id="getSchedulesByCriteria" parameterType="com.nadri.train.dto.TrainCriteria" resultType="com.nadri.train.dto.TrainSearchDto">
		with sche
		as (select s.schedule_no, s.schedule_departure_time, s.schedule_arrival_time, s.train_no,
		    n.type_no, p.train_name,
		    s.route_no,
		    (select count(*) cnt from train_ticket b, train_room m where b.is_canceled = 'N' and b.schedule_no(+) = s.schedule_no and b.room_no = m.room_no and m.room_type = '특실') as booking_s,
		    (select sum(root_seat_count)  from train_room a where a.train_no = s.train_no and a.room_type = '특실') as special,
		    (select count(*) cnt from train_ticket b, train_room m where b.is_canceled = 'N' and b.schedule_no(+) = s.schedule_no and b.room_no = m.room_no and m.room_type = '일반실') as booking_n,
		    (select sum(root_seat_count)  from train_room a where a.train_no = s.train_no and a.room_type = '일반실') as normal
		from train_schedule s, train_route r, train_station t1, train_station t2, train n, train_type p
		where t1.station_name = #{departureStation} and t2.station_name = #{arrivalStation}
		and schedule_departure_time >= #{departureDate} and schedule_departure_time &lt; trunc(#{departureDate}+1)
		and s.route_no = r.route_no
		and r.departure_station_id = t1.station_id
		and r.arrival_station_id = t2.station_id
		and n.train_no = s.train_no
		and n.type_no = p.type_no
		order by s.schedule_no)
		select schedule_no as scheduleNo, 
				schedule_departure_time as departureTime, 
				schedule_arrival_time as arrivalTime, 
				train_no as trainNo,
		    	type_no as typeNo, 
		    	train_name as trainName,
		   		route_no as routeNo, 
		   		booking_s as specialBooking, 
		   		special as specialSeat, 
		   		booking_n as normalBooking, 
		   		normal as normalSeat, 
		   		normal_price_id as normalPriceId, 
		   		normal_price as normalPrice,
		   		special_price_id as specialPriceId,
		   		special_price as specialPrice
		from (select row_number() over(order by x.schedule_no) rn, 
		        x.schedule_no, x.schedule_departure_time, x.schedule_arrival_time, x.train_no,
		        x.type_no, x.train_name, 
		        x.route_no, x.booking_s, x.special, x.booking_n, x.normal,
		        (select price_id from train_price c
		        where c.seat_grade = '일반실'
		        and x.type_no = c.type_no
		        and x.route_no in (c.down_route_no, c.up_route_no)) normal_price_id, 
		        (select price_id from train_price c
		        where c.seat_grade = '특실'
		        and x.type_no = c.type_no
		        and x.route_no in (c.down_route_no, c.up_route_no)) special_price_id,
		        (select c.price from train_price c
		        where c.seat_grade = '일반실'
		        and x.type_no = c.type_no
		        and x.route_no in (c.down_route_no, c.up_route_no)) normal_price, 
		        (select c.price from train_price c
		        where c.seat_grade = '특실'
		        and x.type_no = c.type_no
		        and x.route_no in (c.down_route_no, c.up_route_no)) special_price
		        from sche x)
		where rn >= 7*#{rowNo}+1 and rn &lt; 7*#{rowNo}+8
	</select>
	
	<!-- 열차의 호차 목록을 불러온다. -->
	<select id="getTrainRoom" parameterType="com.nadri.train.web.model.TrainRoomInfo" resultType="com.nadri.train.vo.TrainRoom">
		select r.room_no as no, 
				r.room_name as name, 
				r.root_seat_count as seatNum,
				r.train_no as trainNo,
				(select count(*)
	             from train_ticket t
	             where t.room_no(+) = r.room_no
	             and t.schedule_no = #{schduleNo }
	             and t.is_canceled = 'N') as bookedSeatNum
		from train_room r
		where r.train_no = #{trainNo }
		and r.room_type = #{roomType }
	</select>
	
	<!-- 예약된 좌석번호목록 -->
	<select id="getTrainSeatNo" resultType="com.nadri.train.vo.TrainSeat">
		select seat_no as seatNo,
				room_no as roomNo
		from train_ticket
		where train_no = #{trainNo}
		and schedule_no = #{scheduleNo}
		and is_canceled = 'N'
	</select>
	
	<!-- 예약 정보 추가 -->
	<insert id="insertReservation" parameterType="com.nadri.train.vo.TrainReservation" >
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select train_reservation_seq.nextval
			from dual
		</selectKey>
		insert into train_reservation(reservation_no, total_passengers_count, total_payment_amount, ticketing_status, reservation_date, user_no)
		values
		(#{no}, #{totalCount}, #{totalPrice}, '예약', sysdate, #{userNo})
	</insert>
	
	<!-- 티켓 정보 추가 -->
	<insert id="insertTicket" parameterType="java.util.List" >
		insert into train_ticket(ticket_no, passenger_type, reservation_no, schedule_no, room_no, train_no, price_id, seat_no)
		select train_ticket_seq.nextval, A.* from (
		<foreach collection="list" item="ticket" separator="UNION ALL ">
			select #{ticket.type}, #{ticket.reservationNo}, #{ticket.scheduleNo}, #{ticket.roomNo}, #{ticket.trainNo}, #{ticket.priceId}, #{ticket.seatNo}
			from dual
		</foreach> ) A
	</insert>
	
	<!-- 예약 후 바로 예약정보 조회 -->
	<select id="getReservationByNo" parameterType="map" resultType="com.nadri.train.vo.TrainReservation" >
		select distinct r.reservation_no as no, 
						r.ticketing_status as tickectStatus,
						r.canceled_date as canceledDate,
						r.sold_date as soldDate,
						r.reservation_date as reservationDate, 
						p.train_name as trainName, 
						t.train_no as trainNo,
        				t1.station_name as departureStation, 
        				t2.station_name as arrivalStation, 
        				s.schedule_departure_time as departureTime, 
        				s.schedule_arrival_time as arrivalTime, 
        				r.total_passengers_count as totalCount, 
        				r.total_payment_amount as totalPrice,
        				r.user_no as userNo,
        				r.tid as tid,
        				r.is_printed as isPrinted
		from train_reservation r, train_ticket t, train_schedule s, train_route e, train_station t1, train_station t2, train n, train_type p
		<where>
		
			r.user_no = #{userNo}
			<choose>
				<when test="reservedNo2 != null">
		 			and r.reservation_no in (#{reservedNo1}, #{reservedNo2})
				</when>
				<when test="reservedNo1 != null">
		 			and r.reservation_no = #{reservedNo1}
				</when>
				<otherwise>
					and r.ticketing_status in ('결제', '예약')
					and s.schedule_departure_time > sysdate
				</otherwise>
			</choose>
			and r.reservation_no = t.reservation_no
			and t.schedule_no = s.schedule_no
			and s.route_no = e.route_no
			and e.departure_station_id = t1.station_id
			and e.arrival_station_id = t2.station_id
			and t.train_no = n.train_no
			and n.type_no = p.type_no
		</where>
		order by r.reservation_no
	</select>
	
	<!-- 결제/환불 티켓 정보 조회 -->
	<select id="getAllReservatioin" parameterType="com.nadri.train.dto.TrainReservationCriteria" resultType="com.nadri.train.dto.TrainReservaionTicket">
		SELECT  a.ticket_no as ticketNo, 
		        a.schedule_departure_time as departureDate, 
		        a.schedule_arrival_time as arrivalDate, 
		        a.train_name as trainName, 
		        a.train_no as trainNo, 
		        a.dp as departureStation, 
		        a.ar as arrivalStation,
		        a.room_type as roomType, 
		        a.room_name as roomName, 
		        a.seat_no as seatNo,
		        a.customer_name as customerName,
		        a.is_canceled as isCanceled,  
		        a.price as price,
		        a.passenger_type as type,
		        a.reservation_date as reservedDate,
		        a.is_printed as isPrinted
		FROM (select row_number() over(order by t.ticket_no) rn, t.ticket_no, n.is_printed,
		        s.schedule_departure_time, s.schedule_arrival_time, e.train_name, t.train_no, 
		        t1.station_name dp, t2.station_name ar,
		        r.room_type, r.room_name, t.seat_no,
		        t.customer_name, t.is_canceled, n.reservation_date, t.passenger_type,
		        case when t.is_canceled = 'N' then p.price
                    when t.is_canceled = 'Y' then f.REFUND_PRICE
                end as price
		        from train_ticket t, train_room r, train_price p, train_reservation n, train b, train_type e, 
		            train_schedule s, train_route u, train_station t1, train_station t2, TRAIN_REFUND f
		        where s.schedule_departure_time >= #{startDate}
		        and s.schedule_departure_time &lt; #{endDate}+1
		        and n.user_no = #{userNo}
		        and n.TICKETING_STATUS in ('결제', '취소')
		        and t.reservation_no = n.reservation_no
		        and t.room_no = r.room_no
		        and t.train_no = b.train_no
		        and b.type_no = e.type_no
		        and t.price_id = p.price_id
		        and t.schedule_no = s.schedule_no
		        and s.route_no = u.route_no
		        and u.departure_station_id = t1.station_id
		        and u.arrival_station_id = t2.station_id
		        and f.TICKET_NO(+) = t.TICKET_NO
		        ) a
		where a.rn >= #{begin} and a.rn &lt;= #{end}
	</select>
	
	<select id="getReservationCount" parameterType="com.nadri.train.dto.TrainReservationCriteria" resultType="int">
		select count(*)
		from train_reservation r, train_ticket t, train_schedule s
		<where>
			r.user_no = #{userNo}
			and s.schedule_departure_time >= #{startDate }
			and s.schedule_departure_time &lt; #{endDate }+1
			and r.TICKETING_STATUS in ('결제', '취소')
			and r.reservation_no = t.reservation_no
			and t.schedule_no = s.schedule_no
		</where>
	</select>
	
	<!-- 예약 후 바로 티켓정보 조회 -->
	<select id="getTicketByReservedNo" resultType="com.nadri.train.vo.TrainTicket" >
		select t.ticket_no as no, 
				t.customer_name as customerName, 
				t.passenger_type as type, 
				t.is_canceled as isCanceled, 
				t.reservation_no as reservationNo, 
        		t.schedule_no as scheduleNo,
        		t.train_no as trainNo, 
        		t.price_id as priceId,  
        		p.price as price,
        		t.room_no as roomNo, 
        		r.room_name as roomName, 
        		r.room_type as roomType, 
        		t.seat_no as seatNo
		from train_ticket t, train_room r, train_price p
		where reservation_no in (#{reservedNo1}, #{reservedNo2})
		and t.room_no = r.room_no
		and t.is_canceled = 'N'
		and p.price_id = t.price_id
	</select>
	
	<!-- 티켓 총 개수 -->
	<select id="getTicketCount" parameterType="com.nadri.train.dto.TrainTicketCriteria" resultType="int">
		select count(*)
		from train_ticket t, train_reservation n
		where t.reservation_no = #{reservationNo}
		and n.user_no = #{userNo}
		and t.reservation_no = n.reservation_no
	</select>
	<!-- 티켓 페이지 네이션 -->
	<select id="getTicketByCriteria" parameterType="com.nadri.train.dto.TrainTicketCriteria" resultType="com.nadri.train.vo.TrainTicket" >
		select  a.customer_name as customerName, 
		        a.passenger_type as type, 
		        a.is_canceled as isCanceled, 
		        a.reservation_no as reservationNo, 
		        a.schedule_no as scheduleNo,
		        a.train_no as trainNo, 
		        a.price_id as priceId,  
		        a.price as price,
		        a.room_no as roomNo, 
		        a.room_name as roomName, 
		        a.room_type as roomType, 
		        a.seat_no as seatNo,
		        a.user_name as name
		from (select row_number() over(order by t.ticket_no) rn, t.ticket_no, 
		        t.customer_name, t.passenger_type, t.is_canceled, t.reservation_no, 
		        t.schedule_no, t.train_no, t.price_id, p.price, t.room_no, r.room_name, 
		        r.room_type, t.seat_no, u.user_name
		        from train_ticket t, train_room r, train_price p, train_reservation n, user_table u
		        where t.reservation_no = #{reservationNo}
		        and n.user_no = #{userNo}
		        and u.user_no = n.user_no
		        and t.reservation_no = n.reservation_no
		        and t.room_no = r.room_no
		        and t.is_canceled = 'N'
		        and p.price_id = t.price_id) a
		where a.rn >= #{begin} and a.rn &lt;= #{end}
	</select>
	
	<!-- 인기노선 검색 -->
	<select id="getFavoriteRoute" resultType="com.nadri.train.dto.TrainFavoriteRouteDto" >
		select t1.station_name as departureStation, 
				t2.station_name as arrivalStation,
				a.rn as rowNo, 
				a.route_no as routeNo, 
				r.route_image as image, 
		        (select min(p.price)
		         from train_price p
		         where a.route_no in (p.down_route_no, p.up_route_no)
		         group by a.route_no) as minPrice
		from train_route r, train_station t1, train_station t2,
		    (select row_number() over (order by count(*) desc) rn, s.route_no
		     from train_ticket t, train_schedule s
		     where t.schedule_no = s.schedule_no
		     group by s.route_no) a
		where r.route_no = a.route_no
		and a.rn >=1 and a.rn &lt; 10
		and r.departure_station_id = t1.station_id
		and r.arrival_station_id = t2.station_id
		order by a.rn
	</select>
	
	<!-- 예약 시간 조회 -->
	<select id="getReservationIsReserved" resultType="com.nadri.train.vo.TrainReservation" >
		select reservation_no as no, 
				reservation_date as reservationDate
		from train_reservation
		where ticketing_status = '예약'
	</select>
	
<!-- 		<where>
			find_in_set(reservation_no, #{value})
		</where> -->
	<!-- 예약 시간 지난 예약 삭제 -->
	<delete id="deleteReservation" >
		delete from train_reservation
		where reservation_no in 
		<foreach collection="items" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</delete>
	
	<!-- 예약 시간 지난 티켓 삭제 -->
	<delete id="deleteTicket">
		delete from train_ticket
		where reservation_no in 
		<foreach collection="items" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</delete>	
	
	<!-- 티켓 번호 리스트로 티켓 삭제 -->
	<delete id="deleteTicketByNo">
		delete from train_ticket
		where ticket_no in 
		<foreach collection="items" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</delete>
	
	<!-- 예약번호로 예약 삭제 -->
	<delete id="deleteReservationByNo">
		delete from train_reservation
		where reservation_no = #{no}
		and user_no = #{userNo}
	</delete>
	
	
	<!-- 티켓번호로 티켓 정보 조회 -->
	<select id="getTicketByNo" parameterType="int" resultType="com.nadri.train.vo.TrainTicket">
		select  t.ticket_no as no,
				t.customer_name as customerName,
				t.passenger_type as type,
				t.is_canceled as isCanceled,
				t.reservation_no as reservationNo,
				t.schedule_no as scheduleNo,
				t.room_no as roomNo,
				t.train_no as trainNo,
				t.price_id as priceId,
				p.price as price,
				t.seat_no as seatNo
		from train_ticket t, train_price p
		where t.ticket_no = #{value}
		and t.price_id = p.price_id
	</select>
	
	<!-- 티켓 여러개 조회 -->
	<select id="getTicketByNoList" resultType="com.nadri.train.vo.TrainTicket">
		select  t.ticket_no as no,
				t.customer_name as customerName,
				t.passenger_type as type,
				t.is_canceled as isCanceled,
				t.reservation_no as reservationNo,
				t.schedule_no as scheduleNo,
				t.room_no as roomNo,
				t.train_no as trainNo,
				t.price_id as priceId,
				p.price as price,
				t.seat_no as seatNo
		from train_ticket t, train_price p
		where t.ticket_no in
			<foreach collection="list" item="no" open="(" close=")" separator=", ">
				#{no}
			</foreach>
		and t.price_id = p.price_id
	</select>
	
	<!-- 예약정보 수정 -->
	<update id="updateReservation" parameterType="com.nadri.train.vo.TrainReservation">
		update train_reservation
		set
			total_passengers_count = #{totalCount},
			total_payment_amount = #{totalPrice},
			ticketing_status = #{tickectStatus},
			canceled_date = #{canceledDate},
			sold_date = #{soldDate},
			tid = #{tid},
			is_printed = #{isPrinted}
		where reservation_no = #{no}
	</update>
	
	<!-- 티켓 정보 수정 -->
	<update id="updateTicket" parameterType="com.nadri.train.vo.TrainTicket">
		update train_ticket
		set
			customer_name = #{customerName},
			passenger_type = #{type},
			is_canceled = #{isCanceled},
			schedule_no = #{scheduleNo},
			room_no = #{roomNo},
			train_no = #{trainNo},
			price_id = #{priceId},
			seat_no = #{seatNo}
		where ticket_no = #{no}
	</update>
	
	<!-- 환불내역 넣기 -->
	<insert id="insertRefund" parameterType="java.util.List">
		insert into train_refund(ticket_no, refund_date, refund_price, refund_fees)
		select A.* from (
		<foreach collection="list" item="refund" separator="UNION ALL">
			select #{refund.ticketNo}, sysdate, #{refund.refundPrice}, #{refund.refundFees}
			from dual
		</foreach> ) A
	</insert>
	
	<!-- 예약전에 예약된 좌석 있나 확인 -->
	<select id="getSeatList" parameterType="com.nadri.train.vo.TrainTicket" resultType="int">
		select seat_no
		from train_ticket
		where is_canceled = 'N'
		and schedule_no = #{scheduleNo}
		and room_no = #{roomNo}
		and train_no = #{trainNo}
		and price_id = #{priceId}
	</select>
	
</mapper>